---
title: "Evomics Workshop part 2"
subtitle: "Microbiome analysis with microViz"
author: "David Barnett"
date: "24 May 2023"
format: 
  html:
    theme:
      light: flatly
      dark: darkly
    fontsize: 1em
    toc: true
    toc-depth: 4
    fig-width: 6
    fig-height: 4
    dpi: 120
---

## Welcome to Part 2 👋

-   Bar charts and diversity were relatively straightforward topics, conceptually.
-   Let's look at some more things we can do with microbiome composition data!

**Topics for part 2:**

1.  Dissimilarity measures
2.  Ordination: PCoA & PCA (with interactive data exploration)
3.  Differential abundance testing

### Further resources

Refer to the [microViz website](https://david-barnett.github.io/microViz/) to see help pages for every function (as well as further tutorials).

------------------------------------------------------------------------

## Setup ⚙️

Load the R packages we will be using:

```{r message=FALSE}
library(tidyverse)
library(seriation)
library(phyloseq)
library(microViz)
library(shiny)
```

## Dissimilarity 💩 ↔ 💩 ?

-   **Ecosystem Diversity** is sometimes referred to as "alpha" diversity or "within-sample" diversity
-   Now we're going to look at **Dissimilarity** between ecosystems
-   Sometimes this is confusingly referred to as "beta diversity" analysis, or "between-sample" diversity

```{r}
data("shao19") # this example data is built in to microViz
```

-   For this part we're going to use an infant gut microbiome shotgun metagenomics dataset.

```{r}
shao19
```

- Do you remember how to examine a phyloseq object?
- Look at the rank names, sample data variables etc.

```{r}
#
```

``` r
?shao19 # in the console, for info on the data source
```

------------------------------------------------------------------------

::: {.callout-note collapse="true"}
### A foreword on filtering

-   You should check if any of your samples have a surprisingly low total number of (classified) reads.
-   This can suggest that something went wrong in the lab (or during sample collection)
-   The data from these samples might be unreliable.
-   You might already do a check for total reads and remove poor quality samples during the fastq file processing.

```{r, fig.height=3, fig.width=6}
shao19 %>%
  ps_mutate(reads = sample_sums(shao19)) %>%
  samdat_tbl() %>%
  ggplot(aes(x = reads)) +
  geom_freqpoly(bins = 500) +
  geom_rug(alpha = 0.5) +
  scale_x_log10(labels = scales::label_number()) +
  labs(x = "Number of classified reads", y = NULL) +
  theme_bw()
```

**How many is enough? There is no easy answer!**

These samples have great depth.
There are a few with much less reads than the rest, and a few with under a million.
You might consider dropping the samples with under a million reads, to see if it affects your results, but in this case we won't.

But 100,000 is still a lot, compared to what older sequencing machines produced: 1000 reads might have been considered very good.
So look at the distribution for your data, in case there are obvious outliers, and look at recent papers using a similar sequencing technique for what kind of threshold they used.

There might also be relevant information for the type of sequencer you used on e.g.
Illumina website.
e.g. for this type of sequencing Illumina suggests you should expect at least a million reads (and this is good for RNA seq analyses).
<https://support.illumina.com/bulletins/2017/04/considerations-for-rna-seq-read-length-and-coverage-.html>
:::

------------------------------------------------------------------------

### Dissimilarity measures

-   What are we doing?
-   Calculating the dissimilarities between pairs of microbiome samples
-   We talked about these commonly-used dissimilarity measures in the lecture.
    -   **Binary Jaccard** - presence-absence
    -   **Bray-Curtis** - abundance-weighted
    -   **UniFrac** distances (unweighted / weighted / generalised)
-   To simplify and speed up the analyses, we're going to take a smaller part of the dataset.
-   We'll only look at the 300 infant fecal samples from 4 days of age.

```{r}
infants <- shao19 %>% ps_filter(family_role == "child", infant_age == 4)
```

-   We're going to filter out rare taxa quite strictly, for similar reasons
-   But we won't overwrite our smaller dataset: we'll do the filtering per analysis
-   You will find out more about the how and why of taxa filtering later

```{r}
infants %>%
  tax_filter(min_prevalence = 2.5 / 100) %>%
  tax_agg(rank = "genus") %>%
  tax_transform("binary") %>% # converts counts to absence/presence: 0/1
  dist_calc(dist = "jaccard")
```

::: {.callout-important collapse="true"}
### "Binary" Jaccard `010101`

-   Remember to run a "binary" transform on your data before computing "jaccard" distance.
-   There is a quantitative form of the Jaccard distance, which is the default behaviour!
-   But the qualitative (presence/absence) version is mostly used in microbial ecology.
-   If you want an abundance-weighted ecological dissimilarity, use Bray-Curtis!
:::

-   We now have our pairwise dissimilarities! 🎉
-   A distance matrix is attached as an extra part on the original phyloseq object

::: {.callout-note collapse="true"}
### Dissimilarity or distance?

-   These terms are often used interchangeably
-   You will find dissimilarities in a distance matrix
-   But if you want to be pedantic a true "distance metric" d, must satisfy 3 properties:
    1.  Identity of indiscernibles: For any samples x and y, d(x, y) = 0 if and only if x = y
    2.  Symmetry: For any samples x and y, d(x, y) = d(y, x)
    3.  Triangle inequality: For any samples x, y, and z, d(x, z) ≤ d(x, y) + d(y, z).
-   
    (3) can be interpreted as: "the direct path between two points must be at least as short as any detour"
-   This is not true for e.g. Bray-Curtis, but in practice it is very rarely problematic.
:::

-   The object is now class "psExtra" (created by microViz)
-   A psExtra also stores info about the aggregation and transformations you performed

```{r}
distances <- infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_agg(rank = "genus") %>%
  tax_transform("binary") %>%
  dist_calc(dist = "jaccard") %>%
  dist_get()
```

You can extract the distance matrix with dist_get.

```{r}
as.matrix(distances)[1:5, 1:5]
```

The Binary Jaccard dissimilarities range between 0 (identical) and 1 (no shared genera).

```{r}
range(distances)
```

------------------------------------------------------------------------

## Ordination

-   What can we do with these dissimilarities? 🤔
-   We can make an ordination! 💡
-   Conceptually, ordination refers to a process of ordering things (in our case: samples).
-   Similar samples are placed closer to each other, and dissimilar samples are placed further away.

### PCoA

Principal Co-ordinates Analysis is one kind of ordination.

-   PCoA takes a distance matrix and finds new dimensions (a co-ordinate system, if you like)
-   The new dimensions are created with the aim to preserve the original distances between samples
-   And to capture the majority of this distance information in the first dimensions
-   This makes it easier to visualize the patterns in your data, in 2D or 3D plots 👀

::: {.callout-note collapse="true"}
### For more info, see "GUSTAME"

-   There is helpful info about ordination methods including PCoA on the GUide to STatistical Analysis in Microbial Ecology website (GUSTA ME). <https://sites.google.com/site/mb3gustame/dissimilarity-based-methods/principal-coordinates-analysis>
-   This website covers a lot of other topics too, which may be interesting for you to read at a later date if you'll work on microbiome analysis.
:::

```{r}
infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_transform(trans = "identity", rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(alpha = 0.6, size = 2) +
  theme_classic(12) +
  coord_fixed(0.7)
```

To get a little insight into what has happened here, we can colour each sample according to its dominant (most abundant) genus.

```{r}
infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  ps_calc_dominant(rank = "genus", none = "Mixed", other = "Other") %>%
  tax_transform(trans = "identity", rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(color = "dominant_genus", alpha = 0.6, size = 2) +
  scale_color_brewer(name = "Dominant Genus", palette = "Dark2") +
  theme_classic(12) +
  coord_fixed(0.7)
```

## Interactive ordination!

`microViz` provides a Shiny app `ord_explore` to interactively create and explore PCoA plots and other ordinations.
See the code below to get started.
But read the instructions first.

::: {.callout-tip collapse="true"}
### **Instructions:** a few things to try out

-   Colour the samples using the variables in the sample data
-   Select a few samples to view their composition on barplots!
-   Change some ordination options:
    -   Different rank of taxonomic aggregation
    -   Different distances we've discussed
-   Copy the automatically generated code
    -   Exit the app (press escape or click red button in R console!)
    -   Paste and run the code to recreate the ordination plot
    -   Customise the plot: change colour scheme, title, etc.
-   Launch the app again with a different subset of the data
    -   Practice using `ps_filter` etc.
    -   e.g. plot the data of the mothers' gut microbiomes!
    -   compute and colour points by an alpha diversity measure?
:::

::: {.callout-warning collapse="true"}
### **Beware: some important notes on interactive analysis**

-   UniFrac distances can be quite slow (over a minute) to calculate!
    -   Filter to fewer samples and fewer taxa to speed it up (Before launching the app)
-   There are many distances available, feel free to try out ones we haven't talked about
    -   **BUT**:
        -   You shouldn't use a distance that you don't understand in your actual work, even if the plot looks nice! 😉
        -   A few of the distances might not work...
            -   They are mostly implemented in the package `vegan` and I haven't tested them all
            -   Errors will appear in the RStudio R console
            -   You can report to me any distances that don't work (if you're feeling helpful! 😇)
-   There are other ordination methods available in `ord_explore`
    -   Try out PCA, principal **components** analysis, which does NOT use distances
    -   We will not cover constrained and conditioned ordinations
    -   If you are interested in e.g. RDA, you can look this up later
    -   See the [Guide to Statistical Analysis in Microbial Ecology](https://sites.google.com/site/mb3gustame/constrained-analyses/rda)
:::

``` r
# fire up the shiny app
# run these lines in your console (don't keep in script/notebook)
infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  # calculate new sample variables with dominant taxon (optional)
  ps_calc_dominant(rank = "genus", none = "Mixed", other = "Other") %>%
  # launch a Shiny app in your web browser!
  ord_explore()
```

``` r
# Again, with different options

# Run these lines in your console
shao19 %>%
  ps_filter(family_role == "mother") %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  # calculate a few sample variables for interest (optional)
  ps_calc_dominant(rank = "genus", none = "Mixed", other = "Other") %>%
  ps_calc_diversity(rank = "genus", index = "shannon") %>%
  ps_calc_richness(rank = "genus", index = "observed") %>%
  # launch a Shiny app in your web browser!
  ord_explore()
```

------------------------------------------------------------------------

## PERMANOVA

Permutational multivariate analysis of variance.

-   ANOVA - analysis of variance (statistical modelling approach)
-   Multivariate - more than one dependent variable (multiple taxa!)
-   Permutational - statistical significance estimates obtained by shuffling the data many times

::: {.callout-note collapse="true"}
### For more details on PERMANOVA

-   See this excellent book chapter by Marti Anderson on PERMANOVA: <https://onlinelibrary.wiley.com/doi/full/10.1002/9781118445112.stat07841>
-   Sometimes PERMANOVA is called NP-MANOVA (non-parametric MANOVA)
-   e.g. on the GUide to STatistical Analysis in Microbial Ecology [website](https://sites.google.com/site/mb3gustame/hypothesis-tests/manova/npmanova).
:::

-   **TLDR:** Are those groups on the PCoA actually different??

```{r}
infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(alpha = 0.6, size = 2, color = "birth_mode") +
  theme_classic(12) +
  coord_fixed(0.7) +
  stat_ellipse(aes(color = birth_mode)) +
  scale_color_brewer(palette = "Set1")
```

```{r}
infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  dist_permanova(variables = "birth_mode", n_perms = 99, seed = 123) %>%
  perm_get()
# Use more permutations for a more reliable p.value in your real work (slower)
# Set a random seed number for reproducibility of this stochastic method
```

You can see from the model output that the p value, Pr(\>F) is below 0.05. So there is good statistical evidence that the bacterial gut microbiota composition of C-section delivered infants has a different composition than vaginally delivered infants at 4 days of age.

### Reporting PCoA and PERMANOVA methods

- Your methodological choices matter, you should report what you did: 
    - any relevant rare taxon filtering thresholds
    - the taxonomic rank of aggregation
    - the dissimilarity measure used to compute the pairwise distances

It's probably a good idea to decide on a couple of appropriate distance measures up front for these tests, and report both (at least in supplementary material), as the choice of distance measure can affect results and conclusions!

### Covariate-adjusted PERMANOVA

You can also adjust for covariates in PERMANOVA, and often should, depending on your study design.
Let's fit a more complex model, adjusting for infant sex, birth weight, and the total number of assigned reads.

```{r}
infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  dist_permanova(
    variables = c("birth_mode", "sex", "birth_weight", "number_reads"),
    n_perms = 99, seed = 111
  ) %>%
  perm_get()
# Use more permutations for a more reliable p.value in your real work (slower)
# Set a random seed number for reproducibility of this stochastic method
```

## PCA

-   Principal **Components** Analysis.
-   For practical purposes, PCA is quite similar to Principal Co-ordinates Analysis.
-   In fact, PCA produces equivalent results to PCoA with Euclidean distances.


::: {.callout-tip collapse="true"}
### "Help, what are Euclidean distances?"

-   Euclidean distances are essentially a generalization of Pythagoras' theorem to more dimensions.
-   In our data every taxon is a feature, a dimension, on which we calculate Euclidean distances.

**Pythagoras' theorem:**

$$c = \sqrt{a^2 + b^2}$$

**Euclidean distance:**

$$d\left(p, q\right) = \sqrt{\sum _{i=1}^{n_{taxa}} \left( p_{i}-q_{i}\right)^2 }$$

- Distance $d$ between samples $p$ and $q$, with $i$ taxa.

:::

::: panel-tabset

#### Euclidean PCoA

```{r}
#| code-fold: true
infants %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "euclidean") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(alpha = 0.6, size = 2) +
  geom_rug(alpha = 0.1)
```

#### PCA on counts

```{r}
#| code-fold: true
infants %>%
  tax_agg(rank = "genus") %>%
  ord_calc(method = "PCA") %>%
  ord_plot(alpha = 0.6, size = 2) +
  geom_rug(alpha = 0.1)
```

:::

**Problems with PCA (or PCoA with Euclidean Distances) on microbiome data**

-   These plots look weird! most samples bunch in the middle, with spindly projections..
-   Sensitive to sparsity (double-zero problem) --\> filter rare taxa
-   Excessive emphasis on high-abundance taxa --\> log transform features first

------------------------------------------------------------------------

## Log transformations, and CLR

-   First let's look at the abundance again, this time with heatmaps.
-   Each column is a sample (from an infant), and each row is a taxon.

```{r, fig.height=4, fig.width=6}
infants %>%
  tax_sort(by = sum, at = "genus", trans = "compositional", tree_warn = FALSE) %>%
  tax_transform(trans = "compositional", rank = "genus") %>%
  comp_heatmap(samples = 1:20, taxa = 1:20, name = "Proportions", tax_seriation = "Identity")
```

-   Even though we have picked the top 20 most abundant genera, there are still a lot of zeros
-   **Problem:** We need to deal with the zeros, because `log(0)` is undefined.
-   **Solution:** add a small amount to every value (or just every zero), before applying the log transformation.
-   This small value is often called a pseudo-count.

::: {.callout-tip collapse="true"}
### What value should we use for the pseudo-count?

-   One easy option is to just add a count of 1
-   Another popular option is to add half of the smallest observed real value (from across the whole dataset)
-   In general, for zero replacement, keep it simple and **record your approach**

:::

### Centered Log Ratio transformation:

**Remember**, [Microbiome Datasets Are Compositional: And This Is Not Optional.](https://doi.org/10.3389/fmicb.2017.02224)

::: {.callout-note collapse="true"}
### More details on the "CoDa" problem:

-   The sequencing data gives us relative abundances, not absolute abundances.
-   The total number of reads sequenced per sample is an arbitrary total.

**This leads to two main types of problem:**

-   Interpretation caveats: see differential abundance section later
-   Statistical issues: taxon abundances are not independent, and may appear negatively correlated
-   These issues are worse with simpler ecosystems

Example: If one taxon blooms, the relative abundance of all other taxa will appear to decrease, even if they did not.

*There is the same problem in theory with RNAseq data, but I suspect it is less bothersome because there are many more competing "species" of RNA transcript than there are bacterial species in even a very complex microbiome.* *The centered-log-ratio transformation (along with some other similar ratio transformations) are claimed to help with the statistical issues by transforming the abundances from the simplex to the real space.*

:::

**TL;DR - the CLR transformation is useful for compositional microbiome data.**

-   Practically, the CLR transformation involves finding the geometric mean of each sample
-   Then dividing abundance of each taxon in that sample by this geometric mean
-   Finally, you take the natural log of these ratios

```{r, fig.height=3, fig.width=6}
infants %>%
  tax_sort(by = sum, at = "genus", trans = "compositional", tree_warn = FALSE) %>%
  tax_agg(rank = "genus") %>%
  tax_transform(trans = "clr", zero_replace = "halfmin", chain = TRUE) %>%
  comp_heatmap(
    samples = 1:20, taxa = 1:20, grid_lwd = 2, name = "CLR",
    colors = heat_palette(sym = TRUE),
    tax_seriation = "Identity"
  )
```

### PCA on CLR-transformed taxa

```{r}
infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_transform(rank = "genus", trans = "clr", zero_replace = "halfmin") %>%
  ord_calc(method = "PCA") %>%
  ord_plot(alpha = 0.6, size = 2, color = "birth_mode") +
  theme_classic(12) +
  coord_fixed(0.7)
```

- After the CLR transformation, the plot looks better
- We can see a pattern where the gut microbiomes of infants cluster by birth mode

#### So why is PCA interesting for us?

- Principal components are built directly from a (linear) combination of the original features.

- That means we know how much each taxon contributes to each PC dimension
- We can plot this information (loadings) as arrows, alongside the sample points

```{r}
pca <- infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_transform(rank = "genus", trans = "clr", zero_replace = "halfmin") %>%
  ord_calc(method = "PCA") %>%
  ord_plot(
    alpha = 0.6, size = 2, color = "birth_mode",
    plot_taxa = 1:6, tax_vec_length = 0.275,
    tax_lab_style = tax_lab_style(
      type = "text", max_angle = 90, aspect_ratio = 0.7,
      size = 3, fontface = "bold"
    ),
  ) +
  theme_classic(12) +
  coord_fixed(0.7, clip = "off")
pca
```

Interestingly, samples on the right of the plot (which tend to be vaginally-delivered infants) seem to have relatively more Bifidobacterium, Bacteroides and Escherichia, whilst the C-section born infants have relatively more Veillonella.

::: {.callout-important collapse="true"}
### Wait, how to interpret these taxa loadings?

##### Cautiously

- There are caveats and nuance to the interpretation of these plots, which are called PCA bi-plots
- You can read more here: <https://sites.google.com/site/mb3gustame/indirect-gradient-analysis/pca>

##### In general:

The relative length and direction of an arrow indicates how much that taxon contributes to the variation on each visible PC axis, e.g. Variation in Enterococcus abundance contributes quite a lot to variation along the PC2 axis.

This allows you to infer that samples positioned at the bottom of the plot will tend to have higher relative abundance of Enterococcus than samples at the top of the plot.

*(Side note, Phocaeicola were considered part of Bacteroides until this year!)*

:::

::: {.callout-note collapse="true"}
### Fancy circular bar charts?

We can make another kind of barplot, using the PCA information to order our samples in a circular layout.

```{r}
iris <- infants %>%
  tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%
  tax_transform(rank = "genus", trans = "clr", zero_replace = "halfmin") %>%
  ord_calc(method = "PCA") %>%
  ord_plot_iris(
    tax_level = "genus", n_taxa = 12, other = "Other",
    anno_colour = "birth_mode",
    anno_colour_style = list(alpha = 0.6, size = 0.6, show.legend = FALSE)
  )
```

```{r, fig.height=5, fig.width=10}
patchwork::wrap_plots(pca, iris, nrow = 1, guides = "collect")
```

:::

------------------------------------------------------------------------

::: {.callout-note collapse="true"}
### Taxon filtering

We probably want to filter out **rare** taxa, before performing some kinds of analysis.

##### Why remove rare taxa?

**Rare taxa might sometimes be:**

1.  Sequencing errors
2.  Statistically problematic
3.  Biologically irrelevant

##### How to remove rare taxa?

**What is rare?** Two main concepts.

-   Low **prevalence** - taxon only detected in a small number of samples in your dataset.
-   Low **abundance** - relatively few reads assigned to that taxon (on average or in total)

Considering the impact of issues 1, 2, and 3, let's say we are not interested in Species that occur in fewer than 2% of samples, and they have to have at least 10,000 reads in total across all samples.

```{r}
ntaxa(shao19) # before filtering
```

```{r}
shao19 %>%
  tax_filter(min_prevalence = 2 / 100, min_total_abundance = 10000) %>%
  ntaxa() # after filtering
```

- Wow so that would remove **most** of our unique taxa!
- What is going on? Let's make some plots!

```{r}
# make table of summary statistics for the unique taxa in shao19
shaoTaxaStats <- tibble(
  taxon = taxa_names(shao19),
  prevalence = microbiome::prevalence(shao19),
  total_abundance = taxa_sums(shao19)
)
```

```{r}
#| code-fold: true
#| code-summary: Some ggplot2 code
p <- shaoTaxaStats %>%
  ggplot(aes(total_abundance, prevalence)) +
  geom_point(alpha = 0.5) +
  geom_rug(alpha = 0.1) +
  scale_x_continuous(labels = scales::label_number(), name = "Total Abundance") +
  scale_y_continuous(
    labels = scales::label_percent(), breaks = scales::breaks_pretty(n = 9),
    name = "Prevalence (%)",
    sec.axis = sec_axis(
      trans = ~ . * nsamples(shao19), breaks = scales::breaks_pretty(n = 9),
      name = "Prevalence (N samples)"
    )
  ) +
  theme_bw()
p
```

So most taxa have a low prevalence, and handful have way more reads than most.

Let's label those points to check which taxa are the big time players.

```{r}
p + ggrepel::geom_text_repel(
  data = function(df) filter(df, total_abundance > 1e9 | prevalence > 0.6),
  mapping = aes(label = taxon), size = 2.5, min.segment.length = 0, force = 15
)
```

Those taxa make sense for this dataset of mostly infant gut microbiome samples.

Now let's zoom in on the less abundant taxa by log-transforming the axes.
We'll also add lines indicating the thresholds of 2% prevalence and 10000 reads abundance.

```{r}
#| code-fold: true
#| code-summary: Some more ggplot2 code
shaoTaxaStats %>%
  ggplot(aes(x = total_abundance, y = prevalence)) +
  geom_vline(xintercept = 10000, color = "red", linetype = "dotted") +
  geom_hline(yintercept = 2 / 100, color = "red", linetype = "dotted") +
  geom_point(alpha = 0.5) +
  geom_rug(alpha = 0.1) +
  scale_x_log10(labels = scales::label_number(), name = "Total Abundance") +
  scale_y_log10(
    labels = scales::label_percent(), breaks = scales::breaks_log(n = 9),
    name = "Prevalence (%)",
    sec.axis = sec_axis(
      trans = ~ . * nsamples(shao19), breaks = scales::breaks_log(n = 9),
      name = "Prevalence (N samples)"
    )
  ) +
  theme_bw()
```

- We can break this down by phylum if we add the taxonomic table information.

```{r, fig.height = 5, fig.width=8}
#| code-fold: true
#| code-summary: A lot more ggplot2 code!
# don't worry about this code if it's confusing, just focus on the plot output
shao19 %>%
  tax_table() %>%
  as.data.frame() %>%
  as_tibble(rownames = "taxon") %>%
  left_join(shaoTaxaStats, by = "taxon") %>%
  add_count(phylum, name = "phylum_count", sort = TRUE) %>%
  mutate(phylum = factor(phylum, levels = unique(phylum))) %>% # to fix facet order
  mutate(phylum = forcats::fct_lump_n(phylum, n = 5)) %>%
  mutate(phylum = forcats::fct_explicit_na(phylum, na_level = "Other")) %>%
  ggplot(aes(total_abundance, prevalence)) +
  geom_vline(xintercept = 10000, color = "red", linetype = "dotted") +
  geom_hline(yintercept = 2 / 100, color = "red", linetype = "dotted") +
  geom_point(alpha = 0.5, size = 1) +
  geom_rug(alpha = 0.2) +
  scale_x_log10(
    labels = scales::label_log(), breaks = scales::breaks_log(n = 5),
    name = "Total Abundance"
  ) +
  scale_y_log10(
    labels = scales::label_percent(), breaks = scales::breaks_log(n = 9),
    name = "Prevalence (%)",
    sec.axis = sec_axis(
      trans = ~ . * nsamples(shao19), breaks = scales::breaks_log(n = 9),
      name = "Prevalence (N samples)"
    )
  ) +
  facet_wrap("phylum") +
  theme_bw(10)
```

**How you pick a threshold, depends on what analysis method you are filtering for!**

-   alpha diversity: do not filter
-   beta diversity: relevance of threshold depends on your distance measure
-   differential abundance testing: stringent filtering, prevalence \>5%, \>10%? 

:::

## Taxon stats

From the PCA loadings and barplots above, we have some strong suspicions about which taxa have a higher relative abundance in vaginally delivered infants than in c-section delivered infants, and vice versa, but we can also statistically test this.
This is often called "differential abundance" (DA) testing, in the style of "differential expression" (DE) testing from the transcriptomics field.

```{r}
infants %>%
  comp_barplot(
    tax_level = "genus", n_taxa = 12, facet_by = "birth_mode",
    label = NULL, bar_outline_colour = NA
  ) +
  coord_flip() +
  theme(axis.ticks.y = element_blank())
```

### Model one taxon

- We will start by creating a linear regression model for one genus, Bacteroides.
- We will transform the count data by first making it proportions, and then taking a base 2 logarithm, log2, after adding a pseudocount.

```{r}
bacteroidesRegression1 <- infants %>%
  tax_transform("compositional", rank = "genus") %>%
  tax_transform("log2", zero_replace = "halfmin", chain = TRUE) %>%
  tax_model(
    type = "lm", rank = "genus",
    taxa = "Bacteroides", variables = "birth_mode",
    return_psx = FALSE
  ) %>%
  pluck(1)
```

- Looking at the regression results

```{r}
summary(bacteroidesRegression1)
```

```{r}
broom::tidy(bacteroidesRegression1, conf.int = TRUE)
```

::: {.callout-note collapse="true"}
#### Click here for optional ggplot2 extension exercise:

Starting from a dataframe like the one produced by the code below, plot:

1.  Easy: The percentage prevalence of Bacteroides in each birth_mode group
2.  Medium: The distribution of relative abundance of Bacteroides in each birth_mode group, omitting zeros, on a log2 scale
3.  Hard: Do task 1 or 2 for for several taxa in one plot - (hint: `pivot_longer`)

``` r
infants %>%
  tax_transform("compositional", rank = "genus") %>%
  ps_get() %>%
  ps_otu2samdat(taxa = "Bacteroides") %>%
  samdat_tbl()
```

:::

We can fit a model with covariates, as we did for PERMANOVA

- We will convert the categorical variables into indicator (dummy) variables 
- We will scale the continuous covariates to 0 mean and SD 1 (z-scores)
- You'll see this will make our subsequent plots easier to interpret later

```{r}
infants <- infants %>%
  ps_mutate(
    C_section = if_else(birth_mode == "c_section", true = 1, false = 0),
    Female = if_else(sex == "female", true = 1, false = 0),
    Birth_weight_Z = scale(birth_weight, center = TRUE, scale = TRUE),
    Reads_Z = scale(number_reads, center = TRUE, scale = TRUE)
  )
```


```{r}
bacteroidesRegression2 <- infants %>%
  tax_transform("compositional", rank = "genus") %>%
  tax_transform("log2", zero_replace = "halfmin", chain = TRUE) %>%
  tax_model(
    type = "lm", rank = "genus", taxa = "Bacteroides",
    variables = c("C_section", "Female", "Birth_weight_Z", "Reads_Z"),
    return_psx = FALSE
  ) %>%
  pluck(1)
```

- Looking at the regression results

```{r}
summary(bacteroidesRegression2)
broom::tidy(bacteroidesRegression2, conf.int = TRUE)
```

#### Many DA methods

- This method simple method is borrowed from MaAsLin2 
- Note: they call the compositional transformation "Total Sum Scaling (TSS)")
- This is quite a straightforward method, so we will stick with this for today
- But, many statistical methods have been developed for differential abundance analyses

Microbiome abundance data are quite awkward, statistically speaking, due to their sparseness and compositionality.
Each successive method claims to handle some aspect of this awkwardness "better" than previous methods.

The aim is to have a method with adequate power to detect true associations, whilst controlling the type 1 error rate, the "false positive" reporting of associations that are not "truly" present.

Results are surprisingly inconsistent across the different methods, as demonstrated this year in a [fascinating analysis by Jacob Nearing and colleagues](https://www.nature.com/articles/s41467-022-28034-z).

#### So, what to do?

-   Filter out the noise & interpret results with caution! use multiple testing corrections
-   Remember it's all relative (abundance)
-   Try 2 or 3 methods and/or use same method as a previous study if replicating
    -   Avoid Lefse and edgeR?
    -   Beware: Not all methods allow covariate adjustment & few allow random effects (for time-series)


### Model all the taxa!

1.  We're not normally interested in just one taxon!
2.  It's also hard to decide which taxonomic rank we are most interested in modelling!
    - Lower ranks like species or ASVs give better resolution but also more sparsity and classification uncertainty...
    - Higher ranks e.g. classes, could also be more powerful if you think most taxa within that class will follow a similar pattern.

-   So now we will fit a similar model for almost every taxon\* at every rank from phylum to species
-   \*We'll filter out species with a prevalence of less than 10%

```{r}
# The code for `taxatree_models` is quite similar to tax_model.
# However, you might need to run `tax_prepend_ranks` to ensure that each taxon at each rank is always unique.
shaoModels <- infants %>%
  tax_prepend_ranks() %>%
  tax_transform("compositional", rank = "species", keep_counts = TRUE) %>%
  tax_filter(min_prevalence = 0.1, undetected = 0, use_counts = TRUE) %>%
  tax_transform(trans = "log2", chain = TRUE, zero_replace = "halfmin") %>%
  taxatree_models(
    type = lm,
    ranks = c("phylum", "class", "order", "family", "genus", "species"),
    variables = c("C_section", "Female", "Birth_weight_Z", "Reads_Z")
  )
shaoModels
```

*Why filter the taxa? It's less likely that we are interested in rare taxa, and models of rare taxon abundances are more likely to be unreliable. Reducing the the number of taxa modelled also makes the process faster and makes visualizing the results easier!*

#### Getting stats from the models

Next we will get a data.frame containing the regression coefficient estimates, test statistics and corresponding p values from all these regression models.

```{r}
shaoStats <- taxatree_models2stats(shaoModels)
shaoStats
```

```{r}
shaoStats %>% taxatree_stats_get()
```

#### Adjusting p values

- We have performed a lot of statistical tests here!
- It is likely that we could find some significant p-values by chance alone.

- We should correct for multiple testing / control the false discovery rate or family-wise error rate.

*Instead of applying these adjustment methods across all 86 taxa models at all ranks, the default behaviour is to control the family-wise error rate per taxonomic rank.*

```{r}
shaoStats <- shaoStats %>% taxatree_stats_p_adjust(method = "BH", grouping = "rank")
# notice the new variable
shaoStats %>% taxatree_stats_get()
```

### Plot all the taxatree_stats!

- `taxatree_plots()` allows you to plot statistics from all of the taxa models onto a tree layout (e.g. point estimates and significance).
- The taxon model results are organised by rank, radiating out from the central root node 
- e.g. from Phyla around the center to Species in the outermost ring.

`taxatree_plots()` itself returns a list of plots, which you can arrange into one figure with the [`patchwork`](https://patchwork.data-imaginist.com/) package for example (and/or [`cowplot`](https://wilkelab.org/cowplot/articles/plot_grid.html)).

```{r, fig.width=6, fig.height=5}
shaoStats %>%
  taxatree_plots(node_size_range = c(1, 3), sig_stat = "p.adj.BH.rank") %>%
  patchwork::wrap_plots(ncol = 2, guides = "collect")
```

#### Taxatree Key

But how do we know which taxa are which nodes?
We can create a labelled grey tree with `taxatree_plotkey()`.
This labels only some of the taxa based on certain conditions that we specify.

```{r fig.height=4, fig.width=4.5, warning=FALSE}
set.seed(123) # label position
key <- shaoStats %>%
  taxatree_plotkey(
    taxon_renamer = function(x) stringr::str_remove(x, "[pfg]: "),
    # conditions below, for filtering taxa to be labelled
    rank == "phylum" | rank == "genus" & prevalence > 0.2
    # all phyla are labelled, and all genera with a prevalence of over 0.2
  )
key
```

You can do more with these trees to customise them to your liking.
See an extended tutorial [here on the microViz website](https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html#plot-all-the-taxatree_stats): including how to directly label taxa on the colored plots, change the layout and style of the trees, and even how to use a different regression modelling approach.

```{r}
# try it out!
```

------------------------------------------------------------------------

## Session info

`session_info` records your package versions etc.
This is useful for debugging / reproducing analysis.

```{r}
devtools::session_info()
```
