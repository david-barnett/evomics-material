---
title: "Microbiome data analysis with microViz"
author: "David Barnett"
format: 
  revealjs:
    theme: dark
    transition: fade
    slide-number: true
    scrollable: true
    pause: false
    fig-responsive: false
    history: false
    multiplex: true
editor: source
---

# Part 2: Dissimilarity {transition="convex"}

```{r message=FALSE}
library(seriation)
library(dplyr)
library(purrr)
library(ggplot2)
library(cowplot)
library(phyloseq)
library(microViz)
```

```{r}
knitr::opts_chunk$set(fig.width = 6, fig.height = 4, dpi = 120)
options(width = 500)
shao19 <- readRDS(here::here('data/shao19.rds'))
```


## From Diversity to Dissimilarity {transition="convex-in convex-out"}

::: incremental 

- **Alpha diversity**: 
    - Summarizing one sample
    - *"How diverse is this ecosystem?"*

<br>

- **Dissimilarity**: 
    - Comparing a pair of samples
    - *"How different are these two ecosystems?"*

:::

## A new dataset {transition="convex"}

<br> 

```{r}
#| echo: true
shao19
```

<br>

- Infant gut microbiome cohort study: Shao et al. 2019
- Shotgun metagenomic sequencing data: Illumina HiSeq 
- Species resolution taxonomy: metaphlan3


::: notes
New dataset gives you another chance to practice examining and manipulating phyloseq object.
Also shows you that despite a different data generation and processing method, the analyses approaches you are learning today are still applicable.

We won't talk about how metaphlan3 works, but the documentation is very good. In short, the devs inferred a database of many different marker sequences unique to each species, and by counting the number of times those markers are found in your shotgun metagenomic data, species composition is inferred.
:::

## What is dissimilarity? {.smaller transition="convex-in fade-out"}

```{r}
shaoSubset <- shao19 %>% 
  ps_filter(family_role == "child", infant_age > 20, sex == "female")
set.seed(321); randomSubset <- sample(nsamples(shaoSubset), size = 30)
sample_data(shaoSubset) <- sample_data(shaoSubset)[randomSubset, ]
```

```{r}
#| echo: true
shaoSubset %>% comp_barplot("genus", n_taxa = 13, sample_order = 'asis', merge_other = FALSE, label = NULL) 
```

::: notes
By looking at the compositional bar charts, you can spot that some samples look quite similar and some look quite different.
In the last session before dinner, you might have noticed that by default comp_barplot orders the samples in a nicer way with similar looking ones closer together. 
:::

## What is dissimilarity? {.smaller}

```{r}
#| echo: true
shaoSubset %>% comp_barplot("genus", n_taxa = 13, sample_order = "bray", merge_other = FALSE, label = NULL) 
```

::: notes 
How does it decide on this order??! We need some way to quantify how similar or dissimilar two ecosystems / two samples are.
Hands up who has heard of dissimilarity measures? or distance measures maybe?
:::

# Quantifying dissimilarity? {transition="convex"}

- There are many ways
- We'll look at a few popular ones

```{r}
# set up tiny dataset
shao3 <- shaoSubset %>% 
  ps_mutate(id = sample_names(shaoSubset)) %>% 
  # ps_filter(id %in% c("A02146_ba_21", "C02345_ba_221", "A01077_ba_21"))
  # ps_filter(id %in% c("B01406_ba_337", "B02255_ba_21", "B01600_ba_21"))
  ps_filter(id %in% c("B00046_ba_21", "C02345_ba_221", "C01530_ba_324"))
sample_names(shao3) <- c("X", "Y", "Z")
```

## Dissimilarity measures - qualitative {auto-animate=true}

:::: {.columns}

::: {.column width="70%"}

```r
shao3 %>% 
  tax_agg("genus") %>% 
  tax_transform("binary") %>% 
  dist_calc("jaccard") 
```
<br>

**Binary Jaccard**: $J = 1 - \frac{N_{shared}}{N_{total}}$ 
  
- N is the number of taxa
- Qualitative: Ignores abundance
- Sensitive to uncommon taxa

::: 
::: {.column width="27%"}

```{r}
shao3j <- shao3 %>% tax_transform(trans = "binary", rank = "genus") %>% dist_calc("jaccard") 
shao3j %>% dist_get() %>% print(diag = TRUE, digits = 2)
```

```{r, fig.width=2.5, fig.height=4}
shao3 %>% comp_barplot(
  tax_level = "genus", n_taxa = 13, merge_other = FALSE,
  bar_width = 0.7, sample_order = "asis"
) +
  theme(legend.position = "none", axis.text.x = element_text(size = 16))
```

:::
::::

## Dissimilarity measures - quantitative {auto-animate=true}

::::: {.columns}

:::: {.column width="70%"}

```r
shao3 %>% 
  tax_agg("genus") %>% 
  dist_calc("bray") 
```

<br>

**Bray-Curtis**: $BC = 1 - \frac{2W}{A+B}$

- A + B is total readcount of both samples
- W is sum of lesser counts of each taxon
- Quantitative: Abundance-weighted

:::: 
:::: {.column width="27%"}

```{r}
shao3_bray <- shao3 %>% tax_agg(rank = "genus") %>% dist_calc("bray") 
shao3_bray %>% dist_get() %>% print(diag = TRUE, digits = 2)
```

```{r, fig.width=2.5, fig.height=4}
shao3 %>% comp_barplot(
  tax_level = "genus", n_taxa = 13, merge_other = FALSE,
  bar_width = 0.7, sample_order = "asis"
) +
  theme(legend.position = "none", axis.text.x = element_text(size = 16))
```

::::
:::::

::: notes
https://www.davidzeleny.net/anadat-r/doku.php/en:similarity
Has good details.

This is manual calculation of BC between samples X and Y.
`shao3 %>% tax_transform('identity', "genus") %>% otu_get() %>% t() %>% as.data.frame() %>% mutate(min = pmin(X, Y)) %>% summarise(W = sum(min), A = sum(X), B = sum(Y)) %>% summarise(PS = 2*W / (A + B). BC = 1 - PS)`
:::

## Dissimilarity measures - phylogenetic {background-color="white" .smaller}

**UniFrac distance**: Fraction of the branch length of the phylogenetic tree
that leads to taxa from either one environment (sample) or the other, but not both.

![](images/lozupone-unifrac.jpg)

*Lozupone and Knight 2005*

## Dissimilarity measures - phylogenetic {background-color="white" .smaller transition="fade-in convex-out"}

- **Weighted UniFrac distance**: branch lengths are weighted by the relative abundance of sequences in each community (sample)
- **Generalized UniFrac** (not shown): partial abundance weighting - *Chen et al. 2012*

![](images/lozupone-weighted-unifrac.jpeg)

*Lozupone et al. 2007*

::: notes
In example: Square sequences are weighted twice as much as circle sequences because there are twice as many total **circle** sequences in the dataset.
:::

# Why quantify dissimilarity? {transition="convex"}

- To put our samples in order
- This helps us see patterns in our data
- But we can do more than just sort a bar chart!


## Ordination with PCoA {.smaller auto-animate=true}

#### "Principal Co-ordinates Analysis" (aka MDS - multi-dimensional scaling)

From distance matrix to new dimensions 

```{r}
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  dist_get() %>%
  as.matrix() %>%
  .[1:12, 1:8]
```

## Ordination with PCoA {.smaller auto-animate=true}

#### "Principal Co-ordinates Analysis" (aka MDS - multi-dimensional scaling)

From distance matrix to new dimensions 

```{r, fig.width=5, fig.height=4.5}
#| output-location: column
#| echo: true
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(
    alpha = 0.6, size = 3
  ) +
  theme_classic(12) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2))
```

::: notes
PCoA interpretation: - ordination method attempts to preserve the original pairwise distances between samples.
So closer samples have more similar ecosystems, more distant samples have more different ecosystems.
:::

## Ordination with PCoA - top genus {.smaller auto-animate=true}

#### "Principal Co-ordinates Analysis" (aka MDS - multi-dimensional scaling)

From distance matrix to new dimensions 

```{r, fig.width=5, fig.height=4.5}
#| output-location: column
#| echo: true
shaoSubset %>%
  ps_calc_dominant(
    rank = "genus", n_max = 2, 
    var = "Top_Genus", threshold = 0.2
  ) %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(
    alpha = 0.6, size = 3, color = "Top_Genus"
  ) +
  theme_classic(12) +
  coord_cartesian(
    xlim = c(-2, 2), ylim = c(-2, 2)
  ) +
  theme(
    legend.position = c(0.175, 0.8),
    legend.background = element_rect(colour = "black")
  )
```

::: notes
We can convince ourselves that this is working okay by just looking at top (most abundant) genus for each commmunity.

Note however that not all of the distance information is shown in these first two dimensions.
We see a percentage noted on each axis. This indicates the proportion of variation in our data
that is explained by this axis. 
:::

## Dimensionality reduction? {transition="convex" .smaller}

- PCoA axes are ordered in decreasing amount of variation explained
- Only use or look at the first few = "dimensionality reduction"

```{r, fig.height=3, fig.width=6}
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_get() %>%
  plot_scree() +
  geom_col(data = ~ filter(., axis %in% c("MDS1", "MDS2")), fill = "red") +
  labs(y = "Variation explained", x = NULL) +
  theme(panel.background = element_blank())
```


## Ordination with PCoA - useful? {.smaller auto-animate=true}

#### "Principal Co-ordinates Analysis" (aka MDS - multi-dimensional scaling)

From distance matrix to new dimensions 

```{r, fig.width=5, fig.height=4.5}
#| output-location: column
#| echo: true
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(
    alpha = 0.6, size = 3, color = "birth_mode"
  ) +
  theme_classic(12) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
  theme(
    legend.position = c(0.175, 0.8),
    legend.background = element_rect(colour = "black")
  )
```

## Ordination with PCoA - useful {.smaller auto-animate=true}

#### "Principal Co-ordinates Analysis" (aka MDS - multi-dimensional scaling)

From distance matrix to new dimensions 

```{r, fig.width=5, fig.height=4.5}
#| output-location: column
#| echo: true
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(
    alpha = 0.6, size = 3, color = "birth_mode"
  ) +
  theme_classic(12) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
  theme(
    legend.position = c(0.175, 0.8),
    legend.background = element_rect(colour = "black")
  ) +
  stat_ellipse(aes(color = birth_mode))
```


## PERMANOVA {.smaller}

- Permutational Multivariate ANOVA (ANOVA: ANalysis Of VAriance)
- *Does the average microbiome composition differ by birth mode?*

:::: {.columns}
::: {.column width="45%"}

```{r, fig.width=5, fig.height=4.5}
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(
    alpha = 0.6, size = 3, color = "birth_mode"
  ) +
  theme_classic(12) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
  theme(
    legend.position = c(0.175, 0.8),
    legend.background = element_rect(colour = "black")
  ) +
  stat_ellipse(aes(color = birth_mode))
```

:::
::: {.column width="55%"}

```{r}
#| echo: true
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  dist_permanova(variables = "birth_mode") %>%
  perm_get() %>%
  broom::tidy()
```

:::
::::


## Ordination - interactive {.smaller transition="convex-in fade-out"}

This ordination thing is nice, but I can't see the compositions directly...

```{r, fig.width=5, fig.height=4.5}
shaoSubset %>%
  tax_agg(rank = "genus") %>%
  dist_calc(dist = "bray") %>%
  ord_calc(method = "PCoA") %>%
  ord_plot(
    alpha = 0.6, size = 3, color = "birth_mode"
  ) +
  theme_classic(12) +
  coord_cartesian(xlim = c(-2, 2), ylim = c(-2, 2)) +
  theme(
    legend.position = c(0.175, 0.8),
    legend.background = element_rect(colour = "black")
  ) +
  stat_ellipse(aes(color = birth_mode))
```

## {transition="fade"}

![](images/20210429_ord_explore_x175.gif)

# Filtering taxa {transition="convex"}

But before you get to that fun stuff, we need to talk about filtering!

## Rare taxa - problems {transition="convex"}

**Rare taxa might be:**

1.  Sequencing errors
2.  Statistically problematic
3.  Biologically irrelevant

::: notes
1.  Rare taxa might be erroneous: sequencing errors (DADA2 isn't perfect), chimeric sequences...
2.  Statistical challenges:
    -   There are often A LOT of different rare taxa
        -   Sparsity, lots of zeros
        -   Low precision in very low abundance taxa (integer counts)
        -   Multiple comparisons (we'll get to that later)
    -   Having many many taxa in your dataset can really slow down some analyses!
3.  Biological (ir)relevance:
    -   For many (most?) microbiome research questions, rare taxa are less likely to be relevant
    -   For common host health problems and the human/animal microbiome, if a taxon only occurs in every 100th person, it is less likely to be relevant to risk common disease outcomes (?)

I'm sure one can think of many cases where rare taxa are biologically relevant, but problems 1 and 2 are still there.
:::

## Rare taxa - what is rare? {transition="convex"}

**Two main concepts:**

-   Low **prevalence** - taxon only detected in a small number of samples in your dataset.
-   Low **abundance** - relatively few reads assigned to that taxon (on average or in total)

::: fragment

```{r}
#| echo: true
ntaxa(shao19)
```

:::

::: fragment

```{r}
#| echo: true
shao19 %>% 
  tax_filter(min_prevalence = 2 / 100, min_total_abundance = 10000) %>% 
  ntaxa()
```

:::

::: notes
Consider the impact of issues 1, 2, and 3.
Let's say we are not interested in unique taxa that occur in fewer than 2% of samples, and they have to have at least 10,000 reads in total across all samples.
Wow we lost a lot of taxa! Let's look at why.
:::

```{r}
# make table of summary statistics for the unique taxa in shao19
shaoTaxaStats <- tibble(
  taxon = taxa_names(shao19),
  prevalence = microbiome::prevalence(shao19),
  total_abundance = taxa_sums(shao19)
)
```

```{r}
p <- shaoTaxaStats %>%
  ggplot(aes(total_abundance, prevalence)) +
  geom_point(alpha = 0.5) +
  geom_rug(alpha = 0.1) +
  scale_x_continuous(
    labels = scales::label_number(), name = "Total Abundance"
  ) +
  scale_y_continuous(
    labels = scales::label_percent(), breaks = scales::breaks_pretty(n = 9),
    name = "Prevalence (%)",
    sec.axis = sec_axis(
      trans = ~ . * nsamples(shao19), breaks = scales::breaks_pretty(n = 9),
      name = "Prevalence (N samples)"
    )
  ) +
  theme_bw()
```

## Filtering - prev/abund plot {transition="convex-in fade-out"}

```{r}
p
```

::: notes
So most taxa have a low prevalence, and a handful have way more reads than most.
:::

## Filtering - labelled

```{r}
p + ggrepel::geom_text_repel(
  data = function(df) filter(df, total_abundance > 1e9 | prevalence > 0.6),
  mapping = aes(label = taxon), size = 2.5, min.segment.length = 0, force = 15
)
```

::: notes
Let's label those points to check which taxa are the big time players.
Those taxa make sense for this dataset of mostly infant gut microbiome samples.
:::

## Filtering - log transform

```{r}
shaoTaxaStats %>%
  ggplot(aes(x = total_abundance, y = prevalence)) +
  geom_vline(xintercept = 10000, color = "red", linetype = "dashed") +
  geom_hline(yintercept = 2 / 100, color = "red", linetype = "dashed") +
  geom_point(alpha = 0.5) +
  geom_rug(alpha = 0.1) +
  scale_x_log10(labels = scales::label_number(), name = "Total Abundance") +
  scale_y_log10(
    labels = scales::label_percent(), breaks = scales::breaks_log(n = 9),
    name = "Prevalence (%)",
    sec.axis = sec_axis(
      trans = ~ . * nsamples(shao19), breaks = scales::breaks_log(n = 9),
      name = "Prevalence (N samples)"
    )
  ) +
  theme_bw()
```

::: notes
Now let's zoom in on the less abundant taxa by log-transforming the axes.
(We'll talk more about log transforming in the next slides/exercises).

We've also added lines indicating the thresholds of 2% prevalence and 10000 reads abundance.
Everything in the top-right box gets kept, otherwise, chuck it!
:::


## Filtering - phylum facets {transition="fade-in convex-out"}

```{r, fig.height = 5, fig.width=8}
# don't worry about this code if it's confusing, just focus on the plot output
shao19 %>%
  tax_table() %>%
  as.data.frame() %>%
  as_tibble(rownames = "taxon") %>%
  left_join(shaoTaxaStats, by = "taxon") %>%
  add_count(phylum, name = "phylum_count", sort = TRUE) %>%
  mutate(phylum = factor(phylum, levels = unique(phylum))) %>% # to fix facet order
  mutate(phylum = forcats::fct_lump_n(phylum, n = 5)) %>%
  mutate(phylum = forcats::fct_explicit_na(phylum, na_level = "Other")) %>%
  ggplot(aes(total_abundance, prevalence)) +
  geom_vline(xintercept = 10000, color = "red", linetype = "dashed") +
  geom_hline(yintercept = 2 / 100, color = "red", linetype = "dashed") +
  geom_point(alpha = 0.5, size = 1) +
  geom_rug(alpha = 0.2) +
  scale_x_log10(
    labels = scales::label_log(), breaks = scales::breaks_log(n = 5),
    name = "Total Abundance"
  ) +
  scale_y_log10(
    labels = scales::label_percent(), breaks = scales::breaks_log(n = 9),
    name = "Prevalence (%)",
    sec.axis = sec_axis(
      trans = ~ . * nsamples(shao19), breaks = scales::breaks_log(n = 9),
      name = "Prevalence (N samples)"
    )
  ) +
  facet_wrap("phylum") +
  theme_bw(10)
```

::: notes
We can break this down by phylum if we add the taxonomic table information.
:::

## Filtering - thresholds? {transition="convex"}

**How to pick a threshold?**

Depends on what analysis method you are filtering for!

::: incremental
-   alpha diversity = DO NOT FILTER
-   beta diversity = relevance of threshold depends on your distance measure (next topic!)
-   differential abundance testing = stringent filtering, prevalence \>5%, \>10%? (last topic!)
:::

# Your turn {transition="convex"}

